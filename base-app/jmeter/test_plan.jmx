<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - Stepping Thread Group">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads, 1)}</stringProp>
        <stringProp name="Threads initial delay">0</stringProp>
        <stringProp name="Start users count">1</stringProp>
        <stringProp name="Start users count burst"></stringProp>
        <stringProp name="Start users period">1</stringProp>
        <stringProp name="Stop users count">1</stringProp>
        <stringProp name="Stop users period">1</stringProp>
        <stringProp name="flighttime">${__P(on_hold_t, 350)}</stringProp>
        <stringProp name="rampUp">0</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">/*
  JSR223 PreProcessor (Groovy)
  - Configura &quot;total_threads&quot; como una propiedad (props) según franjas horarias en CDMX.
  - Configura &quot;on_hold_t&quot; (tiempo aleatorio entre 300-600).
*/

import java.time.LocalDateTime
import java.time.ZoneId
import java.util.Random

// Tomamos la fecha/hora local en CDMX
def now = LocalDateTime.now(ZoneId.of(&quot;America/Mexico_City&quot;))
def hour = now.getHour()
def minute = now.getMinute()

// Generador random
def random = new Random()

// Inicializa totalThreads
int totalThreads = 1

// Determina el número de threads según la hora
if (hour == 12) {
    if (minute &gt;= 28 &amp;&amp; minute &lt; 33) {
        // 12:28 pm a 12:33 pm =&gt; 20 a 30 threads
        totalThreads = 20 + random.nextInt(11)   // [20..30]
    } else if (minute &gt;= 33 &amp;&amp; minute &lt; 38) {
        // 12:33 pm a 12:38 pm =&gt; 30 a 50 threads
        totalThreads = 30 + random.nextInt(21)  // [30..50]
    } else if (minute &gt;= 38 &amp;&amp; minute &lt; 43) {
        // 12:38 pm a 12:43 pm =&gt; 3 a 5 threads
        totalThreads = 3 + random.nextInt(3)   // [3..5]
    } else if (minute &gt;= 43 &amp;&amp; minute &lt; 48) {
        // 12:43 pm a 12:48 pm =&gt; 2 a 3 threads
        totalThreads = 2 + random.nextInt(2)   // [2..3]
    } else {
        // Otros minutos =&gt; 1 a 2 threads
        totalThreads = 1 + random.nextInt(2)   // [1..2]
    }
} else {
    // Otras horas =&gt; 1 a 2 threads
    totalThreads = 1 + random.nextInt(2)   // [1..2]
}

// Determina el hold time aleatorio entre 300 y 600
def onHold = 180     // [300..600]

// Ponemos estos valores en las PROPIEDADES de JMeter
props.put(&quot;total_threads&quot;, totalThreads.toString())
props.put(&quot;on_hold_t&quot;, onHold.toString())

// [Opcional] Log para depurar
log.info(&quot;Hora local en CDMX: ${hour}:${minute} - total_threads=${totalThreads}, on_hold_t=${onHold}&quot;) </stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <stringProp name="HTTPSampler.domain">146.190.185.161</stringProp>
          <stringProp name="HTTPSampler.path">/mem-ops</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
